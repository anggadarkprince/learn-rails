<% content_for :title do %> - <%= @article.title %>
<% end %>

<% content_for :head do %>
    <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-584ce81653d5a038"></script>
    <%= javascript_tag "window._token = '#{form_authenticity_token}'" %>
<% end %>

<div class="container mt-5">
  <div class="row">
    <div class="col-lg-9">
      <div class="pr-xl-4">
        <%= render partial: 'articles/viewer', locals: {article: @article} %>

        <h4 class="mb-4 mt-5"><%= t(:action_share) %></h4>
        <div class="addthis_inline_share_toolbox"></div>

        <h4 class="mb-4 mt-5"><%= t(:label_author) %></h4>
        <%= render partial: 'author/author_card', locals: {author: @article.user} %>

        <h4 class="mb-4 mt-5" id="comment"><%= t(:label_comments) %></h4>
        <%= render 'comments/form' %>

        <div class="mb-5 mt-5">
          <%= render @article.comments.where('comment_id IS NULL').order(created_at: :desc) %>
        </div>
      </div>
    </div>
    <div class="col-lg-3 d-md-block" hidden>
      <%= render 'sidebar' %>
    </div>
  </div>
</div>

<script>
    $(document).ready(function () {
        var viewerStorageKey = 'blogstrap-viewer';
        var voterStorageKey = 'blogstrap-voter';

        var localViewerData = localStorage.getItem(viewerStorageKey);
        var localVoterData = localStorage.getItem(voterStorageKey);

        var viewHistory = localViewerData == null ? [] : JSON.parse(localViewerData)
        var voteHistory = localVoterData == null ? [] : JSON.parse(localVoterData)

        function checkHistory(data, key) {
            var isExist = false;
            for (var i = 0; i < data.length; i++) {
                if (key == data[i]) {
                    isExist = true;
                    break;
                }
            }
            return isExist;
        }

        if (!checkHistory(viewHistory, <%= @article.id %>)) {
            setTimeout(function () {
                $.ajax({
                    url: '<%= count_article_url %>',
                    method: 'post',
                    dataType: 'json',
                    data: {
                        id: '<%= @article.id %>',
                        authenticity_token: window._token
                    },
                    success: function (data) {
                        viewHistory.push(data.result.id);
                        localStorage.setItem(viewerStorageKey, JSON.stringify(viewHistory));
                    },
                    error: function (data) {
                        console.log(data.message);
                        debugger;
                    }
                })
            }, 15000);
        }

        $('.btn-vote').on('click', function (e) {
            e.preventDefault();

            var parent = $(this).closest('ul');
            var commentId = parent.data('id');

            if (!checkHistory(voteHistory, commentId)) {
                parent.find('.btn-vote').addClass('disabled');

                var counterTag = parent.find('.vote-counter');
                var operatedWith = $(this).data('type') === 'up' ? 1 : -1;
                var operationResult = parseInt(counterTag.text()) + operatedWith;
                counterTag.html(operationResult).addClass(operationResult > 0 ? 'text-primary' : 'text-danger');

                $.ajax({
                    url: $(this).attr('href'),
                    method: 'post',
                    dataType: 'json',
                    data: {
                        id: commentId,
                        authenticity_token: window._token
                    },
                    success: function (data) {
                        voteHistory.push(data.result.id);
                        localStorage.setItem(voterStorageKey, JSON.stringify(voteHistory));
                    },
                    error: function (data) {
                        console.log(data.message);
                        debugger;
                    }
                });
            }
        })

        $('.comment-control').each(function () {
            var commentId = $(this).data('id');
            if (checkHistory(voteHistory, commentId)) {
                $(this).find('.btn-vote').addClass('disabled');
                var counterTag = $(this).find('.vote-counter');
                counterTag.addClass(parseInt(counterTag.text()) > 0 ? 'text-primary' : 'text-danger')
            }
        });
    });
</script>